program -> 'PROGRAM' 'IDENT' 'SEMICOLON' declarations 'BEGIN' statementSequence 'END' 'DOT'
declarations -> constants types variables
constants -> 'CONST' 'IDENT' 'EQUAL' constant 'SEMICOLON' constants_aux
constants_aux -> 'IDENT' 'EQUAL' constant 'SEMICOLON' constants_aux|
types -> 'TYPE' 'IDENT' 'EQUAL' type 'SEMICOLON' types_aux|
types_aux -> 'IDENT' 'EQUAL' type 'SEMICOLON' types_aux|
variables -> 'VAR' identifList 'COLON' type 'SEMICOLON' variables_aux|
variables_aux ->  identifList 'COLON' type 'SEMICOLON' variables_aux|
statementSequence -> statement statementSequence_aux|
statementSequence_aux -> 'SEMICOLON' statement statementSequence_aux|
statement -> variable 'ASSIGN' expression|'WHILE' expression 'DO' statement|'REPEAT' statementSequence 'UNTIL' expression| 'FOR' variableIdentif 'ASSIGN' expression to_or_downto expression 'DO' statement|'BEGIN' statementSequence 'END'|'IF' expression 'THEN' statement statement_aux
to_or_downto -> 'TO'|'DOWNTO'
statement_aux -> ELSE statement statement_aux|
expression -> simpleExpression|simpleExpression relationalOperator simpleExpression 
simpleExpression -> signo term simpleExpression_aux
simpleExpression_aux -> additionOperator term simpleExpression_aux|
signo -> 'ADD' | 'SUB' |
term -> factor term_aux
term_aux ->  multiplicationOperator factor|
factor -> variable | 'NUMBER' | OPAR expression 'CPAR' | 'NOT' factor
relationalOperator -> 'EQUAL' | 'DIFFERENT' | 'LT' | 'LTE' | 'GT' | 'GTE'
additionOperator -> 'ADD' | 'SUB' | 'OR'
multiplicationOperator -> 'ASTER' | 'BARRA' | 'DIV' | 'MOD' | 'AND'
variable -> variableIdentif | variableArray
variableIdentif -> 'IDENT'
variableArray -> 'IDENT' 'OSQRBRA' expressionList 'CSQRBRA'
expressionList -> expression expressionList_aux
expressionList_aux -> 'COMMMA' expression|
type -> simpleType | arrayType | 'IDENT'
simpleType -> constant 'DOTDOT' constant | 'OPAR' identifList 'CPAR'
arrayType -> 'ARRAY' 'OSQRBRA' simpleType simpleType_aux 'CSQRBRA' 'OF' type
simpleType_aux -> 'COMMA' simpleType|
identifList -> 'IDENT' identifList_aux
identifList_aux -> 'COMMA' 'IDENT' identifList_aux|
constant -> signo constant_aux
constant_aux -> 'IDENT'|'NUMBER'